#!/usr/bin/env python3

'''
Basic sktable Regression Test Script

Initialized with the path to a working directory this script figures out the
rudimentary specifications of an sktable run and compares the existing
reference files with the output of the current version of the program.
'''


import os
import sys
import shutil
import subprocess
import argparse
from distutils.dir_util import copy_tree
from argparse import RawTextHelpFormatter

sys.path.append(os.path.abspath('../../../../sktools/src/'))

import testwithworkdir as twd
from testwithworkdir import TestWithWorkDirError


USAGE = '''
Basic sktable Regression Test Script\n\n

Initialized with the path to a working directory this script figures out the
rudimentary specifications of an sktable run and compares the existing
reference files with the output of the current version of the program.
'''


def main(cmdlineargs=None):
    '''Main driver routine.

    Args:
        cmdlineargs: list of command line arguments. When None, arguments in
                     sys.argv are parsed (Default: None)

    '''

    print('#1')

    args = parse_cmdline_args(cmdlineargs)

    print('#2')

    copy_tree(os.path.join(args.templateroot, args.test),
              os.path.join(args.workdir, args.test))

    print('#3')

    cwd = os.path.join(args.workdir, args.test)

    print('#4')

    # get sktable configuration
    with open(os.path.join(cwd, 'config'), 'r') as fd:
        config = fd.readline()

    print('#5')

    cmd = 'python3 ' \
        + os.path.abspath('../../../../sktools/src/sktools/scripts/skgen.py') \
        + ' ' + '-c {} '.format(
            os.path.join(cwd, 'skdef.hsd')) \
        + '-o {} '.format(os.path.abspath(
            '../../../slateratom/prog/slateratom')) \
        + '-t {} '.format(
            os.path.abspath('../../../sktwocnt/prog/sktwocnt')) \
        + 'sktable ' + config

    print('#6')

    # remove _build folder and old files if present
    shutil.rmtree(os.path.join(cwd, '_build'), ignore_errors=True)
    print('#7')
    for fname in os.listdir(cwd):
        if not fname.startswith('_') and fname.endswith('.skf'):
            os.remove(os.path.join(cwd, fname))

    print('#8')

    # set environment variables
    env = os.environ.copy()
    print('#9')
    path = os.path.abspath('../../../../sktools/src/') + os.pathsep \
        + os.path.abspath('../../../../sktools/src/sktools/')
    print('#10')
    try:
        env['PYTHONPATH'] = path + os.pathsep + env['PYTHONPATH']
    except KeyError:
        env['PYTHONPATH'] = path
    print('#11')

    # run skgen/sktable
    subprocess.call(cmd, cwd=cwd, env=env, shell=True)
    print('#12')

    test = twd.TestWithWorkDir(os.path.join(args.workdir, args.test))
    print('#13')
    passed = test.test()
    print('#14')

    if not passed:
        msg = "Regression test '" + str(args.test) + "' did not pass."
        raise TestWithWorkDirError(msg)

    print('#15')


def parse_cmdline_args(cmdlineargs=None):
    '''Parses command line arguments.

    Args:
        cmdlineargs: List of command line arguments. When None, arguments in
            sys.argv are parsed (Default: None).

    '''

    parser = argparse.ArgumentParser(
        description=USAGE, formatter_class=RawTextHelpFormatter)

    msg = 'test specification'
    parser.add_argument('test', action='store', type=str, help=msg)

    msg = 'working directory to run the tests in'
    parser.add_argument('workdir', action='store', type=str, help=msg)

    msg = 'path to root of test template directories'
    parser.add_argument('-r', '--templateroot', action='store',
                        dest='templateroot', default=os.getcwd(), type=str,
                        help=msg)

    args = parser.parse_args(cmdlineargs)

    return args


main()
